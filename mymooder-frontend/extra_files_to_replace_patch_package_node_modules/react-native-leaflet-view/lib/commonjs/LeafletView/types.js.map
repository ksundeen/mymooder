{"version":3,"sources":["types.ts"],"names":["OWN_POSTION_MARKER_ID","WebViewLeafletEvents","AnimationType","MapLayerType","MapShapeType","INFINITE_ANIMATION_ITERATIONS","AnimationDirection"],"mappings":";;;;;;AAKO,MAAMA,qBAAqB,GAAG,uBAA9B;;IAEKC,oB;;;WAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;AAAAA,EAAAA,oB;GAAAA,oB,oCAAAA,oB;;IAuBAC,a;;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,6BAAAA,a;;IASAC,Y;;;WAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,4BAAAA,Y;;IAQAC,Y;;;WAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,4BAAAA,Y;;AAQL,MAAMC,6BAAqC,GAAG,UAA9C;;IAEKC,kB;;;WAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,kCAAAA,kB","sourcesContent":["import * as ReactLeaflet from 'react-leaflet';\nexport type LatLng = ReactLeaflet.LatLng;\nexport type Point = ReactLeaflet.Point;\nexport type LatLngBounds = ReactLeaflet.LatLngBounds;\n\nexport const OWN_POSTION_MARKER_ID = 'OWN_POSTION_MARKER_ID';\n\nexport enum WebViewLeafletEvents {\n  MAP_COMPONENT_MOUNTED = 'MAP_COMPONENT_MOUNTED',\n  MAP_READY = 'MAP_READY',\n  DOCUMENT_EVENT_LISTENER_ADDED = 'DOCUMENT_EVENT_LISTENER_ADDED',\n  WINDOW_EVENT_LISTENER_ADDED = 'WINDOW_EVENT_LISTENER_ADDED',\n  UNABLE_TO_ADD_EVENT_LISTENER = 'UNABLE_TO_ADD_EVENT_LISTENER',\n  DOCUMENT_EVENT_LISTENER_REMOVED = 'DOCUMENT_EVENT_LISTENER_REMOVED',\n  WINDOW_EVENT_LISTENER_REMOVED = 'WINDOW_EVENT_LISTENER_REMOVED',\n  ON_MOVE_END = 'onMoveEnd',\n  ON_MOVE_START = 'onMoveStart',\n  ON_MOVE = 'onMove',\n  ON_RESIZE = 'onResize',\n  ON_UNLOAD = 'onUnload',\n  ON_VIEW_RESET = 'onViewReset',\n  ON_ZOOM_END = 'onZoomEnd',\n  ON_ZOOM_LEVELS_CHANGE = 'onZoomLevelsChange',\n  ON_ZOOM_START = 'onZoomStart',\n  ON_ZOOM = 'onZoom',\n  ON_MAP_TOUCHED = 'onMapClicked',\n  ON_MAP_MARKER_CLICKED = 'onMapMarkerClicked',\n  //  ON_MAP_SHAPE_CLICKED = \"onMapShapeClicked\" cannot click on shapes yet\n}\n\nexport enum AnimationType {\n  BOUNCE = 'bounce',\n  FADE = 'fade',\n  PULSE = 'pulse',\n  JUMP = 'jump',\n  SPIN = 'spin',\n  WAGGLE = 'waggle',\n}\n\nexport enum MapLayerType {\n  IMAGE_LAYER = 'ImageOverlay',\n  TILE_LAYER = 'TileLayer',\n  VECTOR_LAYER = 'VectorLayer',\n  VIDEO_LAYER = 'VideoOverlay',\n  WMS_TILE_LAYER = 'WMSTileLayer',\n}\n\nexport enum MapShapeType {\n  CIRCLE = 'Circle',\n  CIRCLE_MARKER = 'CircleMarker',\n  POLYLINE = 'Polyline',\n  POLYGON = 'Polygon',\n  RECTANGLE = 'Rectangle',\n}\n\nexport const INFINITE_ANIMATION_ITERATIONS: string = 'infinite';\n\nexport enum AnimationDirection {\n  NORMAL = 'nomal',\n  REVERSE = 'reverse',\n  ALTERNATE = 'alternate',\n  ALTERNATE_REVERSE = 'alternate-reverse',\n}\nexport interface MapMarkerAnimation {\n  type: AnimationType;\n  duration?: number;\n  delay?: number;\n  direction?: AnimationDirection;\n  iterationCount?: number | typeof INFINITE_ANIMATION_ITERATIONS;\n}\n\nexport interface MapMarker {\n  animation?: MapMarkerAnimation;\n  position: LatLng;\n  divIcon?: L.DivIcon;\n  icon: any;\n  iconAnchor?: Point;\n  id?: string;\n  size?: Point;\n  title?: string;\n}\n\nexport interface MapEventMessage {\n  event?: any;\n  msg?: string;\n  error?: string;\n  payload?: any;\n}\n\nexport interface MapLayer {\n  attribution?: string;\n  baseLayer?: boolean;\n  baseLayerIsChecked?: boolean;\n  baseLayerName?: string;\n  bounds?: LatLngBounds;\n  id?: string;\n  layerType?: MapLayerType;\n  opacity?: number;\n  pane?: string;\n  subLayer?: string;\n  url?: string;\n  zIndex?: number;\n}\n\nexport interface MapShape {\n  bounds?: LatLng[];\n  center?: LatLng;\n  color?: string;\n  id?: string;\n  positions?: LatLng[] | LatLng[][];\n  radius?: number;\n  shapeType: MapShapeType;\n}\n\nexport interface MapMessage {\n  mapLayers?: MapLayer[];\n  mapMarkers?: MapMarker[];\n  mapShapes?: MapShape[];\n  mapCenterPosition?: LatLng;\n  ownPositionMarker?: OwnPositionMarker;\n  zoom?: number;\n}\n\nexport interface WebviewLeafletMessagePayload {\n  bounds?: LatLngBounds;\n  mapCenterPosition: LatLng;\n  mapMarkerID?: string;\n  touchLatLng?: LatLng;\n  zoom?: number;\n}\n\nexport interface WebviewLeafletMessage {\n  event?: any;\n  msg?: string;\n  error?: string;\n  payload?: WebviewLeafletMessagePayload;\n}\n\nexport interface OwnPositionMarker {\n  animation: MapMarkerAnimation;\n  id?: string;\n  icon: string;\n  position: LatLng;\n  size: Point;\n}\n"]}